{"version":3,"file":"ipc.js","sourceRoot":"","sources":["../src/main/ipc.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureEvent, configureScope, Scope } from '@sentry/core';\nimport { Event } from '@sentry/types';\nimport { forget, logger, SentryError } from '@sentry/utils';\nimport { app, ipcMain, protocol, WebContents } from 'electron';\n\nimport { IPCChannel, IPCMode, mergeEvents, PROTOCOL_SCHEME } from '../common';\nimport { supportsFullProtocol, whenAppReady } from './electron-normalize';\nimport { ElectronMainOptionsInternal } from './sdk';\n\n/**\n * Handle events from the renderer processes\n */\nexport function handleEvent(options: ElectronMainOptionsInternal, jsonEvent: string, contents?: WebContents): void {\n  let event: Event;\n  try {\n    event = JSON.parse(jsonEvent) as Event;\n  } catch {\n    logger.warn('sentry-electron received an invalid event message');\n    return;\n  }\n\n  const process = contents ? options?.getRendererName?.(contents) || 'renderer' : 'renderer';\n\n  captureEvent(mergeEvents(event, { tags: { 'event.process': process } }));\n}\n\n/** Is object defined and has keys */\nfunction hasKeys(obj: any): boolean {\n  return obj != undefined && Object.keys(obj).length > 0;\n}\n\n/**\n * Handle scope updates from renderer processes\n */\nexport function handleScope(options: ElectronMainOptionsInternal, jsonScope: string): void {\n  let rendererScope: Scope;\n  try {\n    rendererScope = JSON.parse(jsonScope) as Scope;\n  } catch {\n    logger.warn('sentry-electron received an invalid scope message');\n    return;\n  }\n\n  const sentScope = Scope.clone(rendererScope) as any;\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  configureScope((scope) => {\n    if (hasKeys(sentScope._user)) {\n      scope.setUser(sentScope._user);\n    }\n\n    if (hasKeys(sentScope._tags)) {\n      scope.setTags(sentScope._tags);\n    }\n\n    if (hasKeys(sentScope._extra)) {\n      scope.setExtras(sentScope._extra);\n    }\n\n    const breadcrumb = sentScope._breadcrumbs.pop();\n    if (breadcrumb) {\n      scope.addBreadcrumb(breadcrumb, options?.maxBreadcrumbs || 100);\n    }\n  });\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/** Enables Electron protocol handling */\nfunction configureProtocol(options: ElectronMainOptionsInternal): void {\n  if (app.isReady()) {\n    throw new SentryError(\"Sentry SDK should be initialized before the Electron app 'ready' event is fired\");\n  }\n\n  protocol.registerSchemesAsPrivileged([\n    {\n      scheme: PROTOCOL_SCHEME,\n      privileges: { bypassCSP: true, corsEnabled: true, supportFetchAPI: true },\n    },\n  ]);\n\n  forget(\n    whenAppReady.then(() => {\n      for (const sesh of options.getSessions()) {\n        sesh.protocol.registerStringProtocol(PROTOCOL_SCHEME, (request, callback) => {\n          const data = request.uploadData?.[0]?.bytes.toString();\n\n          if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.EVENT}`) && data) {\n            handleEvent(options, data);\n          } else if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.SCOPE}`) && data) {\n            handleScope(options, data);\n          }\n\n          callback('');\n        });\n      }\n    }),\n  );\n}\n\n/**\n * Hooks IPC for communication with the renderer processes\n */\nfunction configureClassic(options: ElectronMainOptionsInternal): void {\n  ipcMain.on(IPCChannel.EVENT, ({ sender }, jsonEvent: string) => handleEvent(options, jsonEvent, sender));\n  ipcMain.on(IPCChannel.SCOPE, (_, jsonScope: string) => handleScope(options, jsonScope));\n}\n\n/** Sets up communication channels with the renderer */\nexport function configureIPC(options: ElectronMainOptionsInternal): void {\n  if (!supportsFullProtocol() && options.ipcMode === IPCMode.Protocol) {\n    throw new SentryError('IPCMode.Protocol is only supported in Electron >= v5');\n  }\n\n  // eslint-disable-next-line no-bitwise\n  if (supportsFullProtocol() && (options.ipcMode & IPCMode.Protocol) > 0) {\n    configureProtocol(options);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  if ((options.ipcMode & IPCMode.Classic) > 0) {\n    configureClassic(options);\n  }\n}\n"]}