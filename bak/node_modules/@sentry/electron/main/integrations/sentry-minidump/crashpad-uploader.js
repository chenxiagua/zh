Object.defineProperty(exports, "__esModule", { value: true });
exports.CrashpadUploader = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@sentry/utils");
const path_1 = require("path");
const electron_normalize_1 = require("../../electron-normalize");
const fs_1 = require("../../fs");
const base_uploader_1 = require("./base-uploader");
/** */
class CrashpadUploader extends base_uploader_1.BaseUploader {
    constructor(options, transport) {
        super(options, transport);
        this._crashesDirectory = (0, electron_normalize_1.getCrashesDirectory)();
        this._crashpadSubDirectory = process.platform === 'win32' ? 'reports' : 'completed';
    }
    /** @inheritdoc */
    _getMinidumpPaths() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            (0, utils_1.forget)(this._deleteCrashpadMetadataFile());
            // Crashpad moves minidump files directly into the 'completed' or 'reports' folder. We can
            // load them from there, upload to the server, and then delete them.
            const dumpDirectory = (0, path_1.join)(this._crashesDirectory, this._crashpadSubDirectory);
            const files = yield (0, fs_1.readDirAsync)(dumpDirectory);
            return files.filter((file) => file.endsWith('.dmp')).map((file) => (0, path_1.join)(dumpDirectory, file));
        });
    }
    /** @inheritdoc */
    _preProcessFile(file) {
        return file;
    }
    /** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */
    _deleteCrashpadMetadataFile(waitMs = 100) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (waitMs > 2000) {
                return;
            }
            const metadataPath = (0, path_1.join)(this._crashesDirectory, 'metadata');
            try {
                yield (0, fs_1.unlinkAsync)(metadataPath);
                utils_1.logger.log('Deleted Crashpad metadata file', metadataPath);
            }
            catch (e) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                if (e.code && e.code == 'EBUSY') {
                    // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing
                    // off and waiting longer each time.
                    setTimeout(() => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                        yield this._deleteCrashpadMetadataFile(waitMs * 2);
                    }), waitMs);
                }
            }
        });
    }
}
exports.CrashpadUploader = CrashpadUploader;
//# sourceMappingURL=crashpad-uploader.js.map