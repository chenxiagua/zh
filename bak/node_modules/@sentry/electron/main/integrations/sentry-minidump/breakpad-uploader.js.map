{"version":3,"file":"breakpad-uploader.js","sourceRoot":"","sources":["../../../src/main/integrations/sentry-minidump/breakpad-uploader.ts"],"names":[],"mappings":";;;AAEA,yCAAuC;AACvC,+BAA4B;AAE5B,iEAA+D;AAC/D,iCAAqD;AACrD,mDAA+C;AAE/C,MAAM;AACN,MAAa,gBAAiB,SAAQ,4BAAY;IAGhD,YAAmB,OAAoB,EAAE,SAAoB;QAC3D,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAHX,sBAAiB,GAAW,IAAA,wCAAmB,GAAE,CAAC;IAInE,CAAC;IAED,kBAAkB;IACF,iBAAiB;;YAC/B,4EAA4E;YAC5E,yBAAyB;YACzB,MAAM,KAAK,GAAG,MAAM,IAAA,iBAAY,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAEzD,mDAAmD;YACnD,mEAAmE;YACnE,OAAO,CAAC,GAAG,CACT,KAAK;iBACF,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBACpE,GAAG,CAAC,CAAO,IAAI,EAAE,EAAE;gBAClB,MAAM,IAAI,GAAG,IAAA,WAAI,EAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;gBAChD,IAAI;oBACF,MAAM,IAAA,gBAAW,EAAC,IAAI,CAAC,CAAC;iBACzB;gBAAC,OAAO,CAAC,EAAE;oBACV,cAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;iBACvC;YACH,CAAC,CAAA,CAAC,CACL,CAAC;YAEF,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,WAAI,EAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC;QACzG,CAAC;KAAA;IAED,oEAAoE;IAC1D,eAAe,CAAC,IAAY;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,wCAAwC,CAAC,CAAC;QAC/E,IAAI,WAAW,GAAG,CAAC,EAAE;YACnB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,CAAC;YAEjE,IAAI,SAAS,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,SAAS,EAAE;gBACvD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;aACvC;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA7CD,4CA6CC","sourcesContent":["import { NodeOptions } from '@sentry/node';\nimport { Transport } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { join } from 'path';\n\nimport { getCrashesDirectory } from '../../electron-normalize';\nimport { readDirAsync, unlinkAsync } from '../../fs';\nimport { BaseUploader } from './base-uploader';\n\n/** */\nexport class BreakpadUploader extends BaseUploader {\n  private readonly _crashesDirectory: string = getCrashesDirectory();\n\n  public constructor(options: NodeOptions, transport: Transport) {\n    super(options, transport);\n  }\n\n  /** @inheritdoc */\n  protected async _getMinidumpPaths(): Promise<string[]> {\n    // Breakpad stores all minidump files along with a metadata file directly in\n    // the crashes directory.\n    const files = await readDirAsync(this._crashesDirectory);\n\n    // Remove all metadata files and forget about them.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(\n      files\n        .filter((file) => file.endsWith('.txt') && !file.endsWith('log.txt'))\n        .map(async (file) => {\n          const path = join(this._crashesDirectory, file);\n          try {\n            await unlinkAsync(path);\n          } catch (e) {\n            logger.warn('Could not delete', path);\n          }\n        }),\n    );\n\n    return files.filter((file) => file.endsWith('.dmp')).map((file) => join(this._crashesDirectory, file));\n  }\n\n  /** Crudely parses the dump file from the Breakpad multipart file */\n  protected _preProcessFile(file: Buffer): Buffer | undefined {\n    const binaryStart = file.lastIndexOf('Content-Type: application/octet-stream');\n    if (binaryStart > 0) {\n      const dumpStart = file.indexOf('MDMP', binaryStart);\n      const dumpEnd = file.lastIndexOf('----------------------------');\n\n      if (dumpStart > 0 && dumpEnd > 0 && dumpEnd > dumpStart) {\n        return file.slice(dumpStart, dumpEnd);\n      }\n    }\n\n    return undefined;\n  }\n}\n"]}