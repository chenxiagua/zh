{"version":3,"file":"fs.js","sourceRoot":"","sources":["../src/main/fs.ts"],"names":[],"mappings":";;;AAAA,uCAA+B;AAC/B,2BAAoG;AACpG,+BAA8C;AAC9C,+BAAiC;AAEpB,QAAA,eAAe,GAAG,IAAA,WAAI,EAAC,cAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;AAE1D,QAAA,cAAc,GAAG,IAAA,gBAAS,EAAC,cAAS,CAAC,CAAC;AACtC,QAAA,aAAa,GAAG,IAAA,gBAAS,EAAC,aAAQ,CAAC,CAAC;AACpC,QAAA,UAAU,GAAG,IAAA,gBAAS,EAAC,UAAK,CAAC,CAAC;AAC9B,QAAA,SAAS,GAAG,IAAA,gBAAS,EAAC,SAAI,CAAC,CAAC;AAC5B,QAAA,WAAW,GAAG,IAAA,gBAAS,EAAC,WAAM,CAAC,CAAC;AAChC,QAAA,YAAY,GAAG,IAAA,gBAAS,EAAC,YAAO,CAAC,CAAC;AAClC,QAAA,WAAW,GAAG,IAAA,gBAAS,EAAC,WAAM,CAAC,CAAC;AAE7C,4DAA4D;AAE5D;;;;;GAKG;AACH,SAAsB,MAAM,CAAC,IAAY;;QACvC,sCAAsC;QACtC,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,CAAC;QAE/B,IAAI;YACF,OAAO,IAAA,kBAAU,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SACpC;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,KAAK,GAAG,GAAuB,CAAC;YACtC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACpC,MAAM,MAAM,CAAC,IAAA,cAAO,EAAC,QAAQ,CAAC,CAAC,CAAC;gBAChC,OAAO,IAAA,kBAAU,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACpC;YAED,IAAI;gBACF,IAAI,CAAC,IAAA,aAAQ,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE;oBACrC,MAAM,GAAG,CAAC;iBACX;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,GAAG,CAAC;aACX;SACF;IACH,CAAC;CAAA;AArBD,wBAqBC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CAAC,IAAY;IACrC,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,CAAC;IAE/B,IAAI;QACF,IAAA,cAAS,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC5B;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,KAAK,GAAG,GAAuB,CAAC;QACtC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;YACpC,UAAU,CAAC,IAAA,cAAO,EAAC,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAA,cAAS,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC5B;aAAM;YACL,IAAI;gBACF,IAAI,CAAC,IAAA,aAAQ,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE;oBACrC,MAAM,GAAG,CAAC;iBACX;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,GAAG,CAAC;aACX;SACF;KACF;AACH,CAAC;AApBD,gCAoBC","sourcesContent":["import { app } from 'electron';\nimport { mkdir, mkdirSync, readdir, readFile, rename, stat, statSync, unlink, writeFile } from 'fs';\nimport { dirname, join, resolve } from 'path';\nimport { promisify } from 'util';\n\nexport const sentryCachePath = join(app.getPath('userData'), 'sentry');\n\nexport const writeFileAsync = promisify(writeFile);\nexport const readFileAsync = promisify(readFile);\nexport const mkdirAsync = promisify(mkdir);\nexport const statAsync = promisify(stat);\nexport const unlinkAsync = promisify(unlink);\nexport const readDirAsync = promisify(readdir);\nexport const renameAsync = promisify(rename);\n\n// mkdir/mkdirSync with recursive was only added in Node 10+\n\n/**\n * Recursively creates the given path.\n *\n * @param path A relative or absolute path to create.\n * @returns A Promise that resolves when the path has been created.\n */\nexport async function mkdirp(path: string): Promise<void> {\n  // eslint-disable-next-line no-bitwise\n  const realPath = resolve(path);\n\n  try {\n    return mkdirAsync(realPath, 0o777);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      await mkdirp(dirname(realPath));\n      return mkdirAsync(realPath, 0o777);\n    }\n\n    try {\n      if (!statSync(realPath).isDirectory()) {\n        throw err;\n      }\n    } catch (_) {\n      throw err;\n    }\n  }\n}\n\n/**\n * Synchronous version of {@link mkdirp}.\n *\n * @param path A relative or absolute path to create.\n */\nexport function mkdirpSync(path: string): void {\n  const realPath = resolve(path);\n\n  try {\n    mkdirSync(realPath, 0o777);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      mkdirpSync(dirname(realPath));\n      mkdirSync(realPath, 0o777);\n    } else {\n      try {\n        if (!statSync(realPath).isDirectory()) {\n          throw err;\n        }\n      } catch (_) {\n        throw err;\n      }\n    }\n  }\n}\n"]}