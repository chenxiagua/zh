{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":";;AAAA,yCAA+C;AAE/C,iDAA0E;AAI1E,uCAgBuB;AANrB,iGAAA,QAAQ,OAAA;AAQV,qCAoBsB;AAnBpB,+GAAA,uBAAuB,OAAA;AACvB,qGAAA,aAAa,OAAA;AACb,wGAAA,gBAAgB,OAAA;AAChB,oGAAA,YAAY,OAAA;AACZ,sGAAA,cAAc,OAAA;AACd,sGAAA,cAAc,OAAA;AACd,yGAAA,iBAAiB,OAAA;AACjB,qGAAA,aAAa,OAAA;AACb,2FAAA,GAAG,OAAA;AACH,gGAAA,QAAQ,OAAA;AACR,6FAAA,KAAK,OAAA;AACL,wGAAA,gBAAgB,OAAA;AAChB,kGAAA,UAAU,OAAA;AACV,gGAAA,QAAQ,OAAA;AACR,iGAAA,SAAS,OAAA;AACT,8FAAA,MAAM,OAAA;AACN,+FAAA,OAAO,OAAA;AACP,+FAAA,OAAO,OAAA;AACP,iGAAA,SAAS,OAAA;AAGE,QAAA,YAAY,GAAG,IAAA,8BAAe,GAAE,CAAC;AAO9C,mCAAmC;AAA1B,iGAAA,OAAO,OAAA;AAEhB,0DAA0D;AAC1D,SAAS,aAAa;IACpB,IAAI;QACF,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAA,sBAAc,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KAC9F;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC;;;;;;qDAMiC,CAAC,CAAC;KACpD;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,SAAgB,IAAI,CAAC,OAAiC;IACpD,mCAAmC;IACnC,IAAA,sCAAuB,EAAC,OAAO,CAAC,CAAC;IAEjC,aAAa,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AALD,oBAKC","sourcesContent":["import { dynamicRequire } from '@sentry/utils';\n\nimport { getIntegrations, removeEmptyIntegrations } from './integrations';\nimport { ElectronMainOptions } from './main';\nimport { BrowserOptions } from './renderer';\n\nexport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Request,\n  SdkInfo,\n  Event,\n  EventHint,\n  EventStatus,\n  Exception,\n  Response,\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  makeMain,\n  Scope,\n  startTransaction,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  withScope,\n} from '@sentry/core';\n\nexport const Integrations = getIntegrations();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ElectronOptions extends ElectronMainOptions, BrowserOptions {\n  //\n}\n\nexport { IPCMode } from './common';\n\n/** Fetches the SDK entry point for the current process */\nfunction getEntryPoint(): { init: (options: Partial<ElectronOptions>) => void } {\n  try {\n    return process.type === 'browser' ? dynamicRequire(module, './main') : require('./renderer');\n  } catch (e) {\n    throw new Error(`Failed to automatically detect correct SDK entry point.\n\nIn the Electron main process you should import via:\nimport * as Sentry from '@sentry/electron/main';\n\nIn the Electron renderer process you should import via:\nimport * as Sentry from '@sentry/electron/renderer';`);\n  }\n}\n\n/**\n * The Sentry Electron SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * entry modules. This applies to the main process as well as all renderer\n * processes or further sub processes you spawn. To set context information or\n * send manual events, use the provided methods.\n *\n * @example\n * const { init } = require('@sentry/electron');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { configureScope } from '@sentry/electron';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTags({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/electron';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/electron';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see ElectronOptions for documentation on configuration options.\n */\nexport function init(options: Partial<ElectronOptions>): void {\n  // Filter out any EmptyIntegrations\n  removeEmptyIntegrations(options);\n\n  getEntryPoint().init(options);\n}\n"]}