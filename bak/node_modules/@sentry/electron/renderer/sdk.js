Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.defaultIntegrations = void 0;
/* eslint-disable no-restricted-globals */
const browser_1 = require("@sentry/browser");
const utils_1 = require("@sentry/utils");
const common_1 = require("../common");
const integrations_1 = require("./integrations");
exports.defaultIntegrations = [...browser_1.defaultIntegrations, new integrations_1.ScopeToMain(), new integrations_1.EventToMain()];
/**
 * Initialize Sentry in the Electron renderer process
 */
function init(options = {}) {
    (0, common_1.ensureProcess)('renderer');
    // Ensure the browser SDK is only init'ed once.
    if (window === null || window === void 0 ? void 0 : window.__SENTRY__RENDERER_INIT__) {
        utils_1.logger.warn(`The browser SDK has already been initialized.
If init has been called in the preload and contextIsolation is disabled, is not required to call init in the renderer`);
        return;
    }
    window.__SENTRY__RENDERER_INIT__ = true;
    // We don't want browser session tracking enabled by default because we already have Electron
    // specific session tracking
    if (options.autoSessionTracking === undefined) {
        options.autoSessionTracking = false;
    }
    if (options.defaultIntegrations === undefined) {
        options.defaultIntegrations = exports.defaultIntegrations;
    }
    if (options.dsn === undefined) {
        // Events are sent via the main process but browser SDK wont start without dsn
        options.dsn = 'https://12345@dummy.dsn/12345';
    }
    // We only handle initialScope in the main process otherwise it can cause race conditions over IPC
    delete options.initialScope;
    (0, browser_1.init)(options);
}
exports.init = init;
//# sourceMappingURL=sdk.js.map