{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/renderer/sdk.ts"],"names":[],"mappings":";;AAAA,0CAA0C;AAC1C,6CAIyB;AACzB,yCAAuC;AAEvC,sCAA0C;AAC1C,iDAA0D;AAE7C,QAAA,mBAAmB,GAAG,CAAC,GAAG,6BAA0B,EAAE,IAAI,0BAAW,EAAE,EAAE,IAAI,0BAAW,EAAE,CAAC,CAAC;AAEzG;;GAEG;AACH,SAAgB,IAAI,CAAC,UAA0B,EAAE;IAC/C,IAAA,sBAAa,EAAC,UAAU,CAAC,CAAC;IAE1B,+CAA+C;IAC/C,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,yBAAyB,EAAE;QACrC,cAAM,CAAC,IAAI,CAAC;sHACsG,CAAC,CAAC;QACpH,OAAO;KACR;IAED,MAAM,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAExC,6FAA6F;IAC7F,4BAA4B;IAC5B,IAAI,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE;QAC7C,OAAO,CAAC,mBAAmB,GAAG,KAAK,CAAC;KACrC;IAED,IAAI,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE;QAC7C,OAAO,CAAC,mBAAmB,GAAG,2BAAmB,CAAC;KACnD;IAED,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,EAAE;QAC7B,8EAA8E;QAC9E,OAAO,CAAC,GAAG,GAAG,+BAA+B,CAAC;KAC/C;IAED,kGAAkG;IAClG,OAAO,OAAO,CAAC,YAAY,CAAC;IAE5B,IAAA,cAAW,EAAC,OAAO,CAAC,CAAC;AACvB,CAAC;AA/BD,oBA+BC","sourcesContent":["/* eslint-disable no-restricted-globals */\nimport {\n  BrowserOptions,\n  defaultIntegrations as defaultBrowserIntegrations,\n  init as browserInit,\n} from '@sentry/browser';\nimport { logger } from '@sentry/utils';\n\nimport { ensureProcess } from '../common';\nimport { EventToMain, ScopeToMain } from './integrations';\n\nexport const defaultIntegrations = [...defaultBrowserIntegrations, new ScopeToMain(), new EventToMain()];\n\n/**\n * Initialize Sentry in the Electron renderer process\n */\nexport function init(options: BrowserOptions = {}): void {\n  ensureProcess('renderer');\n\n  // Ensure the browser SDK is only init'ed once.\n  if (window?.__SENTRY__RENDERER_INIT__) {\n    logger.warn(`The browser SDK has already been initialized.\nIf init has been called in the preload and contextIsolation is disabled, is not required to call init in the renderer`);\n    return;\n  }\n\n  window.__SENTRY__RENDERER_INIT__ = true;\n\n  // We don't want browser session tracking enabled by default because we already have Electron\n  // specific session tracking\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = false;\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined) {\n    // Events are sent via the main process but browser SDK wont start without dsn\n    options.dsn = 'https://12345@dummy.dsn/12345';\n  }\n\n  // We only handle initialScope in the main process otherwise it can cause race conditions over IPC\n  delete options.initialScope;\n\n  browserInit(options);\n}\n"]}