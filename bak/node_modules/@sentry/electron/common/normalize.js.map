{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../src/common/normalize.ts"],"names":[],"mappings":";;AAEA;;;;;;;GAOG;AACH,SAAgB,YAAY,CAAC,GAAW,EAAE,QAAgB;IACxD,MAAM,WAAW,GAAG,QAAQ;QAC1B,uBAAuB;SACtB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;QACpB,mCAAmC;SAClC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IAE1C,IAAI,MAAM,GAAG,GAAG,CAAC;IACjB,IAAI;QACF,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;KACzB;IAAC,OAAO,GAAG,EAAE;QACZ,uBAAuB;KACxB;IACD,OAAO,MAAM;SACV,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,gCAAgC;SAC5D,OAAO,CAAC,IAAI,MAAM,CAAC,eAAe,WAAW,IAAI,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;AAC1E,CAAC;AAjBD,oCAiBC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,KAAY,EAAE,QAAgB;IAC3D,yEAAyE;IACzE,oDAAoD;IACpD,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACxC,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;QACnC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAClC,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aACzD;QACH,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,KAAK,CAAC,WAAW,EAAE;QACrB,KAAK,CAAC,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;KAC/D;IAED,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;IAC/B,IAAI,OAAO,CAAC,GAAG,EAAE;QACf,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KACnD;IAED,yEAAyE;IACzE,4EAA4E;IAC5E,+BAA+B;IAC/B,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,OAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KACtC;IAED,4EAA4E;IAC5E,wEAAwE;IACxE,4BAA4B;IAC5B,MAAM,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;IAC5B,OAAO,IAAI,CAAC,WAAW,CAAC;IACxB,OAAO,KAAK,CAAC;AACf,CAAC;AAlCD,wCAkCC;AAED;;;GAGG;AACH,SAAS,aAAa,CAAC,KAAY;IACjC,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAExC,uCAAuC;IACvC,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,SAAS,EAAE;QACb,4CAA4C;QAC5C,iDAAiD;QACjD,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;YAChB,iDAAiD;YACjD,sEAAsE;YACtE,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;SAChC;QAED,kEAAkE;QAClE,MAAM,KAAK,GAAG,SAA2C,CAAC;QAC1D,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;SACnC;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { Event, Exception, Stacktrace } from '@sentry/types';\n\n/**\n * Normalizes URLs in exceptions and stacktraces so Sentry can fingerprint\n * across platforms.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrl(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return newUrl\n    .replace(/\\\\/g, '/')\n    .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n    .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');\n}\n\n/**\n * Normalizes all URLs in an event. See {@link normalizeUrl} for more\n * information. Mutates the passed in event.\n *\n * @param event The event to normalize.\n */\nexport function normalizeEvent(event: Event, basePath: string): Event {\n  // Retrieve stack traces and normalize their URLs. Without this, grouping\n  // would not work due to user folders in file names.\n  const stacktrace = getStacktrace(event);\n  if (stacktrace && stacktrace.frames) {\n    stacktrace.frames.forEach((frame) => {\n      if (frame.filename) {\n        frame.filename = normalizeUrl(frame.filename, basePath);\n      }\n    });\n  }\n\n  if (event.transaction) {\n    event.transaction = normalizeUrl(event.transaction, basePath);\n  }\n\n  const { request = {} } = event;\n  if (request.url) {\n    request.url = normalizeUrl(request.url, basePath);\n  }\n\n  // The user agent is parsed by Sentry and would overwrite certain context\n  // information, which we don't want. Generally remove it, since we know that\n  // we are browsing with Chrome.\n  if (request.headers) {\n    delete request.headers['User-Agent'];\n  }\n\n  // The Node SDK currently adds a default tag for server_name, which contains\n  // the machine name of the computer running Electron. This is not useful\n  // information in this case.\n  const { tags = {} } = event;\n  delete tags.server_name;\n  return event;\n}\n\n/**\n * Returns a reference to the exception stack trace in the given event.\n * @param event An event potentially containing stack traces.\n */\nfunction getStacktrace(event: Event): Stacktrace | undefined {\n  const { stacktrace, exception } = event;\n\n  // Try the main event stack trace first\n  if (stacktrace) {\n    return stacktrace;\n  }\n\n  if (exception) {\n    // Raven Node adheres to the Event interface\n    // @ts-ignore: need to be able to index exception\n    if (exception[0]) {\n      // @ts-ignore: need to be able to index exception\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return exception[0].stacktrace;\n    }\n\n    // Raven JS uses the full values interface, which has been removed\n    const raven = exception as any as { values: Exception[] };\n    if (raven.values && raven.values[0]) {\n      return raven.values[0].stacktrace;\n    }\n  }\n\n  return undefined;\n}\n"]}