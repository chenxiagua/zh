{"version":3,"file":"ipc.js","sourceRoot":"","sources":["../../src/common/ipc.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,eAAe,GAAG,YAAY,CAAC;AAE5C,MAAM,CAAN,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,6CAA6C;IAC7C,2CAA6B,CAAA;IAC7B,8CAA8C;IAC9C,6CAA+B,CAAA;IAC/B,qCAAqC;IACrC,6CAA+B,CAAA;AACjC,CAAC,EAPW,UAAU,KAAV,UAAU,QAOrB","sourcesContent":["export const PROTOCOL_SCHEME = 'sentry-ipc';\n\nexport enum IPCChannel {\n  /** IPC to check main process is listening */\n  PING = 'sentry-electron.ping',\n  /** IPC to send a captured event to Sentry. */\n  EVENT = 'sentry-electron.event',\n  /** IPC to capture scope globally. */\n  SCOPE = 'sentry-electron.scope',\n}\n\nexport interface IPCInterface {\n  sendScope: (scope: string) => void;\n  sendEvent: (event: string) => void;\n}\n\n/**\n * We store the IPC interface on window so it's the same for both regular and isolated contexts\n */\ndeclare global {\n  interface Window {\n    __SENTRY_IPC__?: IPCInterface;\n    __SENTRY__RENDERER_INIT__?: boolean;\n  }\n}\n"]}