{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/main/integrations/sentry-minidump/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport { forget, isPlainObject, isThenable, logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { mergeEvents } from '../../../common';\nimport { getEventDefaults } from '../../context';\nimport { CRASH_REASONS, onChildProcessGone, onRendererProcessGone, usesCrashpad } from '../../electron-normalize';\nimport { sentryCachePath } from '../../fs';\nimport { getRendererProperties, trackRendererProperties } from '../../renderers';\nimport { ElectronMainOptions } from '../../sdk';\nimport { checkPreviousSession, sessionCrashed } from '../../sessions';\nimport { Store } from '../../store';\nimport { ElectronNetTransport } from '../../transports/electron-net';\nimport { BaseUploader } from './base-uploader';\nimport { BreakpadUploader } from './breakpad-uploader';\nimport { CrashpadUploader } from './crashpad-uploader';\n\n/** Sends minidumps via the Sentry uploader */\nexport class SentryMinidump implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'SentryMinidump';\n\n  /** @inheritDoc */\n  public name: string = SentryMinidump.id;\n\n  /** Store to persist context information beyond application crashes. */\n  private _scopeStore?: Store<Scope>;\n\n  /** Temp store for the scope of last run */\n  private _scopeLastRun?: Scope;\n\n  /** Uploader for minidump files. */\n  private _uploader?: BaseUploader;\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n    // requirements. In this case, we prevent enabling native crashes entirely.\n    // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n    if (process.mas) {\n      return;\n    }\n\n    this._startCrashReporter();\n\n    this._scopeStore = new Store<Scope>(sentryCachePath, 'scope_v2', new Scope());\n    // We need to store the scope in a variable here so it can be attached to minidumps\n    this._scopeLastRun = this._scopeStore.get();\n\n    this._setupScopeListener();\n\n    const client = getCurrentHub().getClient<NodeClient>();\n    const options = client?.getOptions() as ElectronMainOptions;\n\n    if (!options?.dsn) {\n      throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n    }\n\n    trackRendererProperties();\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const transport = (client as any)._getBackend().getTransport() as ElectronNetTransport;\n\n    this._uploader = usesCrashpad()\n      ? new CrashpadUploader(options, transport)\n      : new BreakpadUploader(options, transport);\n\n    onRendererProcessGone(CRASH_REASONS, (contents, details) => this._sendRendererCrash(options, contents, details));\n    onChildProcessGone(CRASH_REASONS, (details) => this._sendChildProcessCrash(options, details));\n\n    // Start to submit recent minidump crashes. This will load breadcrumbs and\n    // context information that was cached on disk prior to the crash.\n    forget(\n      this._sendNativeCrashes(options, {\n        level: Severity.Fatal,\n        platform: 'native',\n        tags: { 'event.environment': 'native', 'event.process': 'browser', event_type: 'native' },\n      }).then((minidumpsFound) =>\n        // Check for previous uncompleted session. If a previous session exists\n        // and no minidumps were found, its likely an abnormal exit\n        checkPreviousSession(minidumpsFound),\n      ),\n    );\n  }\n\n  /** Starts the native crash reporter */\n  private _startCrashReporter(): void {\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      // Empty string doesn't work for Linux Crashpad and no submitURL doesn't work for older versions of Electron\n      submitURL: 'https://f.a.k/e',\n      uploadToServer: false,\n      compress: true,\n    });\n  }\n\n  /**\n   * Helper function for sending renderer crashes\n   */\n  private async _sendRendererCrash(\n    options: ElectronMainOptions,\n    contents: Electron.WebContents,\n    details: Partial<Electron.RenderProcessGoneDetails>,\n  ): Promise<void> {\n    const { getRendererName, release } = options;\n    const crashedProcess = getRendererName?.(contents) || 'renderer';\n\n    logger.log(`'${crashedProcess}' process '${details.reason}'`);\n\n    const event = mergeEvents(await getEventDefaults(release), {\n      contexts: {\n        electron: {\n          crashed_url: getRendererProperties(contents.id)?.url || 'unknown',\n          details,\n        },\n      },\n      level: Severity.Fatal,\n      // The default is javascript\n      platform: 'native',\n      tags: { 'event.environment': 'native', 'event.process': crashedProcess, event_type: 'native' },\n    });\n\n    const found = await this._sendNativeCrashes(options, event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  /**\n   * Helper function for sending child process crashes\n   */\n  private async _sendChildProcessCrash(\n    options: ElectronMainOptions,\n    details: Omit<Electron.Details, 'exitCode'>,\n  ): Promise<void> {\n    logger.log(`${details.type} process has ${details.reason}`);\n\n    const event = mergeEvents(await getEventDefaults(options.release), {\n      contexts: {\n        electron: { details },\n      },\n      level: Severity.Fatal,\n      // The default is javascript\n      platform: 'native',\n      tags: { 'event.environment': 'native', 'event.process': details.type, event_type: 'native' },\n    });\n\n    const found = await this._sendNativeCrashes(options, event);\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  /**\n   * Adds a scope listener to persist changes to disk.\n   */\n  private _setupScopeListener(): void {\n    const hubScope = getCurrentHub().getScope();\n    if (hubScope) {\n      hubScope.addScopeListener((updatedScope) => {\n        const scope = Scope.clone(updatedScope);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (scope as any)._eventProcessors = [];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (scope as any)._scopeListeners = [];\n\n        this._scopeStore?.set(scope);\n      });\n    }\n  }\n\n  /**\n   * Loads new native crashes from disk and sends them to Sentry.\n   *\n   * Returns true if one or more minidumps were found\n   */\n  private async _sendNativeCrashes(options: ElectronMainOptions, event: Event): Promise<boolean> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const uploader = this._uploader;\n    if (uploader === undefined) {\n      throw new SentryError('Invariant violation: Native crashes not enabled');\n    }\n\n    try {\n      const paths = await uploader.getNewMinidumps();\n      // We only want to read the scope from disk in case there was a crash last run\n      if (paths.length > 0) {\n        const currentCloned = Scope.clone(getCurrentHub().getScope());\n        const storedScope = Scope.clone(this._scopeLastRun);\n        let newEvent = await storedScope.applyToEvent(event);\n\n        if (newEvent) {\n          newEvent = await currentCloned.applyToEvent(newEvent);\n\n          const { beforeSend, sampleRate } = options;\n\n          if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n            logger.warn(\n              `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n            );\n            return true;\n          }\n\n          if (newEvent && beforeSend) {\n            const beforeSendResult = await this._ensureBeforeSendRv(beforeSend(event));\n\n            if (beforeSendResult === null) {\n              logger.warn('`beforeSend` returned `null`, will not send event.');\n              return true;\n            }\n\n            newEvent = beforeSendResult;\n          }\n\n          paths.forEach((path) => {\n            forget(uploader.uploadMinidump({ path, event: newEvent || {} }));\n          });\n        }\n        // Unset to recover memory\n        this._scopeLastRun = undefined;\n        return true;\n      }\n    } catch (_oO) {\n      logger.error('Error while sending native crash.');\n    }\n\n    return false;\n  }\n\n  /**\n   * Verifies that return value of configured `beforeSend` is of expected type.\n   *\n   * Copied from @sentry/core\n   */\n  private _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n    const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n    if (isThenable(rv)) {\n      return (rv as PromiseLike<Event | null>).then(\n        (event) => {\n          if (!(isPlainObject(event) || event === null)) {\n            throw new SentryError(nullErr);\n          }\n          return event;\n        },\n        (e) => {\n          throw new SentryError(`beforeSend rejected with ${e}`);\n        },\n      );\n    } else if (!(isPlainObject(rv) || rv === null)) {\n      throw new SentryError(nullErr);\n    }\n    return rv;\n  }\n}\n"]}