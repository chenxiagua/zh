{"version":3,"file":"crashpad-uploader.js","sourceRoot":"","sources":["../../../../src/main/integrations/sentry-minidump/crashpad-uploader.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC/C,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,MAAM;AACN,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAMhD,YAAmB,OAAoB,EAAE,SAAoB;QAC3D,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QANX,sBAAiB,GAAW,mBAAmB,EAAE,CAAC;QAOjE,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC;IACtF,CAAC;IAED,kBAAkB;IACF,iBAAiB;;YAC/B,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAC;YAE3C,0FAA0F;YAC1F,oEAAoE;YACpE,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC/E,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;QAChG,CAAC;KAAA;IAED,kBAAkB;IACR,eAAe,CAAC,IAAY;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oHAAoH;IACtG,2BAA2B,CAAC,SAAiB,GAAG;;YAC5D,IAAI,MAAM,GAAG,IAAK,EAAE;gBAClB,OAAO;aACR;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YAC9D,IAAI;gBACF,MAAM,WAAW,CAAC,YAAY,CAAC,CAAC;gBAChC,MAAM,CAAC,GAAG,CAAC,gCAAgC,EAAE,YAAY,CAAC,CAAC;aAC5D;YAAC,OAAO,CAAM,EAAE;gBACf,sEAAsE;gBACtE,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,EAAE;oBAC/B,yGAAyG;oBACzG,oCAAoC;oBACpC,UAAU,CAAC,GAAS,EAAE;wBACpB,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACrD,CAAC,CAAA,EAAE,MAAM,CAAC,CAAC;iBACZ;aACF;QACH,CAAC;KAAA;CACF","sourcesContent":["import { NodeOptions } from '@sentry/node';\nimport { Transport } from '@sentry/types';\nimport { forget, logger } from '@sentry/utils';\nimport { join } from 'path';\n\nimport { getCrashesDirectory } from '../../electron-normalize';\nimport { readDirAsync, unlinkAsync } from '../../fs';\nimport { BaseUploader } from './base-uploader';\n\n/** */\nexport class CrashpadUploader extends BaseUploader {\n  private readonly _crashesDirectory: string = getCrashesDirectory();\n\n  /** The sub-directory where crashpad dumps can be found */\n  private readonly _crashpadSubDirectory: string;\n\n  public constructor(options: NodeOptions, transport: Transport) {\n    super(options, transport);\n    this._crashpadSubDirectory = process.platform === 'win32' ? 'reports' : 'completed';\n  }\n\n  /** @inheritdoc */\n  protected async _getMinidumpPaths(): Promise<string[]> {\n    forget(this._deleteCrashpadMetadataFile());\n\n    // Crashpad moves minidump files directly into the 'completed' or 'reports' folder. We can\n    // load them from there, upload to the server, and then delete them.\n    const dumpDirectory = join(this._crashesDirectory, this._crashpadSubDirectory);\n    const files = await readDirAsync(dumpDirectory);\n    return files.filter((file) => file.endsWith('.dmp')).map((file) => join(dumpDirectory, file));\n  }\n\n  /** @inheritdoc */\n  protected _preProcessFile(file: Buffer): Buffer | undefined {\n    return file;\n  }\n\n  /** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */\n  private async _deleteCrashpadMetadataFile(waitMs: number = 100): Promise<void> {\n    if (waitMs > 2_000) {\n      return;\n    }\n\n    const metadataPath = join(this._crashesDirectory, 'metadata');\n    try {\n      await unlinkAsync(metadataPath);\n      logger.log('Deleted Crashpad metadata file', metadataPath);\n    } catch (e: any) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (e.code && e.code == 'EBUSY') {\n        // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing\n        // off and waiting longer each time.\n        setTimeout(async () => {\n          await this._deleteCrashpadMetadataFile(waitMs * 2);\n        }, waitMs);\n      }\n    }\n  }\n}\n"]}