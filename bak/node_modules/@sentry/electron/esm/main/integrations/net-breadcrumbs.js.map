{"version":3,"file":"net-breadcrumbs.js","sourceRoot":"","sources":["../../../src/main/integrations/net-breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable deprecation/deprecation */\nimport { getCurrentHub } from '@sentry/core';\nimport { Integration, Span } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport { ClientRequest, ClientRequestConstructorOptions, IncomingMessage, net } from 'electron';\nimport * as urlModule from 'url';\n\nimport { OrBool, OrFalse } from '../../common/types';\n\ntype ShouldTraceFn = (method: string, url: string) => boolean;\n\ninterface NetOptions {\n  /**\n   * Whether breadcrumbs should be captured for net requests\n   *\n   * Defaults to: true\n   */\n  breadcrumbs: boolean;\n  /**\n   * Whether to capture transaction spans for net requests\n   *\n   * true | false | (method: string, url: string) => boolean\n   * Defaults to: true\n   */\n  tracing: ShouldTraceFn;\n  /**\n   * Whether to add 'sentry-trace' headers to outgoing requests\n   *\n   * true | false | (method: string, url: string) => boolean\n   * Defaults to: true\n   */\n  tracingOrigins: ShouldTraceFn;\n}\n\nconst DEFAULT_OPTIONS: NetOptions = {\n  breadcrumbs: true,\n  tracing: (_method, _url) => true,\n  tracingOrigins: (_method, _url) => true,\n};\n\n/** Converts all user supplied options to T | false */\nexport function normalizeOptions(options: Partial<OrBool<NetOptions>>): Partial<OrFalse<NetOptions>> {\n  return (Object.keys(options) as (keyof NetOptions)[]).reduce((obj, k) => {\n    if (typeof options[k] === 'function' || options[k] === false) {\n      obj[k] = options[k] as boolean & (false | ShouldTraceFn);\n    }\n    return obj;\n  }, {} as Partial<OrFalse<NetOptions>>);\n}\n\n/** http module integration */\nexport class Net implements Integration {\n  /** @inheritDoc */\n  public static id: string = 'Net';\n\n  /** @inheritDoc */\n  public name: string = Net.id;\n\n  private readonly _options: OrFalse<NetOptions>;\n\n  /** @inheritDoc */\n  public constructor(options: Partial<OrBool<NetOptions>> = {}) {\n    this._options = {\n      ...DEFAULT_OPTIONS,\n      ...normalizeOptions(options),\n    };\n  }\n\n  /** @inheritDoc */\n  public setupOnce(): void {\n    // No need to instrument if we don't want to track anything\n    if (this._options.breadcrumbs || this._options.tracing) {\n      fill(net, 'request', createWrappedRequestFactory(this._options));\n    }\n  }\n}\n\n/**\n * Trimmed down version of the code from Electron here:\n * https://github.com/electron/electron/blob/f3df76dbdc58cb704637b89357e1400791c92cfe/lib/browser/api/net.ts#L209-L269\n *\n * We want to match the final URL that Electron uses\n */\nfunction parseOptions(optionsIn: ClientRequestConstructorOptions | string): { method: string; url: string } {\n  const { method, options } =\n    typeof optionsIn === 'string'\n      ? { method: 'GET', options: urlModule.parse(optionsIn) }\n      : { method: (optionsIn.method || 'GET').toUpperCase(), options: optionsIn };\n\n  let url = 'url' in options ? options.url : undefined;\n\n  if (!url) {\n    const urlObj: urlModule.UrlObject = {};\n    urlObj.protocol = options.protocol || 'http:';\n\n    if (options.host) {\n      urlObj.host = options.host;\n    } else {\n      if (options.hostname) {\n        urlObj.hostname = options.hostname;\n      } else {\n        urlObj.hostname = 'localhost';\n      }\n\n      if (options.port) {\n        urlObj.port = options.port;\n      }\n    }\n\n    const pathObj = urlModule.parse(options.path || '/');\n    urlObj.pathname = pathObj.pathname;\n    urlObj.search = pathObj.search;\n    urlObj.hash = pathObj.hash;\n    url = urlModule.format(urlObj);\n  }\n\n  return {\n    method,\n    url,\n  };\n}\n\ntype RequestOptions = string | ClientRequestConstructorOptions;\ntype RequestMethod = (opt: RequestOptions) => ClientRequest;\ntype WrappedRequestMethodFactory = (original: RequestMethod) => RequestMethod;\n\n/** */\nfunction createWrappedRequestFactory(options: OrFalse<NetOptions>): WrappedRequestMethodFactory {\n  return function wrappedRequestMethodFactory(originalRequestMethod: RequestMethod): RequestMethod {\n    return function requestMethod(this: typeof net, reqOptions: RequestOptions): ClientRequest {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const netModule = this;\n\n      const { url, method } = parseOptions(reqOptions);\n      const request = originalRequestMethod.apply(netModule, [reqOptions]) as ClientRequest;\n\n      if (url.match(/sentry_key/) || request.getHeader('x-sentry-auth')) {\n        return request;\n      }\n\n      let span: Span | undefined;\n\n      const scope = getCurrentHub().getScope();\n      if (scope && options.tracing && options.tracing(method, url)) {\n        const parentSpan = scope.getSpan();\n\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: `${method} ${url}`,\n            op: 'http.client',\n          });\n\n          if (options.tracingOrigins && options.tracingOrigins(method, url)) {\n            request.setHeader('sentry-trace', span.toTraceparent());\n          }\n        }\n      }\n\n      return request\n        .once('response', function (this: ClientRequest, res: IncomingMessage): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (options.breadcrumbs) {\n            addRequestBreadcrumb('response', method, url, req, res);\n          }\n          if (span) {\n            if (res.statusCode) {\n              span.setHttpStatus(res.statusCode);\n            }\n            span.finish();\n          }\n        })\n        .once('error', function (this: ClientRequest, _error: Error): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (options.breadcrumbs) {\n            addRequestBreadcrumb('error', method, url, req, undefined);\n          }\n          if (span) {\n            span.setHttpStatus(500);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(\n  event: string,\n  method: string,\n  url: string,\n  req: ClientRequest,\n  res?: IncomingMessage,\n): void {\n  getCurrentHub().addBreadcrumb(\n    {\n      type: 'http',\n      category: 'electron.net',\n      data: {\n        url,\n        method: method,\n        status_code: res && res.statusCode,\n      },\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n"]}